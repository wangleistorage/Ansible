[client]
#password	= your_password
port = 3306
socket = /tmp/mysql.sock
default-character-set = utf8


[mysqld]
basedir = {{ mysql_basepath }}
datadir = {{ mysql_datapath }}
pid-file = {{ mysql_datapath }}/mysql.pid
log-error = {{ mysql_datapath }}/mysql.err
port = 3306
socket = {{ mysql_sock }}

# 使用character-set-server = utf8(要重启数据库服务)，对于之前已经存在数据库，此参数不产生影响。如果之前的数据库A是latin1，在A中创建的表默认还是latin1，除非指定DEFAULT CHARSET。然而对于新建的数据库，则继承my.cnf文件中使用character-set-server = utf8
character-set-server = utf8

# 如果启用skip-networking，则只能通过localhost、mysql.sock进行访问(127.0.0.1也不可以)
# skip-networking

# 如果启用bind-address，则只能通过bind-address允许的IP、localhost、mysql.sock进行访问(127.0.0.1也不可以)
# bind-address=IP

# server-id 是主从同步所必须的，并且是唯一的，用于标识该语句从那个server写入的
server-id = 1


# 启用skip-character-set-client-handshake选项后，就可以避免客户端程序误操作，使用其他字符集连接进来并写入数据，从而引发乱码问题
# 如果乱码问题，一般分为：(1)前段网页和代码程序格式、(2)传输问题，Tomcat或Apache的配置、(3)MySQL的连接和存储问题
skip-character-set-client-handshake

init-connect='SET NAMES utf8'              #连接时执行的SQL



# ---------------------------------------- 超时时间设置 ----------------------------------------

# 连接数据库的超时时间，其时间为长度为28800s，就是8个小时，就是说MySQL服务器会在操作8小时候断开 |
# 需要再次重连wait_timeout服务器关闭交互式连接之前等待活动的秒数				|
wait_timeout=1800
# interactive_timeout 服务器关闭非交互式连接之前等待活动的秒数					|
interactive_timeout=1800

# ----------------------------------------------------------------------------------------------


# SQL 模式设置
sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES


# -------------------------------------  binlog设置 ---------------------------------- 
# 打开binlog功能
log-bin = mysql-bin
# 设置binlog格式
binlog-format=ROW
# 设置binlog保存时间，删除之前的binlog
expire_logs_days=5
# 设置binlog文件大小限制
max_binlog_size=64M


# --------------------------- 下面四个参数是启用binlog/relaylog的校验，防止日志出错 ---------------------------------
# mysql5.6,binlog_checksum默认设置的是CRC32。如果slave用的5.5或者更早的版本，请将master的binglog-checksum设置为none。
binlog-checksum=CRC32

# 设置为1的话，不仅dump thread会对event进行校验，当master上执行show binlog events的时候，也会对event进行校验。       
# 设置为1，可以保证event被完整无缺地写入到主服务器的binlog中了
master-verify-checksum=1

# 与master_verify_checksum类似，这个也只能设置为0或者1（默认为1)。但是是不同地方的校验
slave-sql-verify-checksum=1
binlog-rows-query-log_events=1


# -------------------------------------- relay-log设置 -----------------------------------------------------
# relay log很多方面都跟binary log差不多，区别是：从服务器I/O线程将主服务器的二进制日志读取过来记录到从服务  
# 器本地文件，然后SQL线程会读取rlay-log日志的内容并应用到从服务器。

# 如果该值为0，则默认值为max_binlog_size，如果不为0，则max_relay_log_size则为最大的relay_log文件大小
# 查看bin-log文件限制：select @@max_binlog_size;
# 查看relay-log文件限制：select @@max_relay_log_size;
max_relay_log_size = 64M 											

relay-log = mysql-bin                                   #文件名格式
relay-log-index = mysql-bin.index                       #index文件名

# 是否自动清空不再需要中继日志时。默认值为1(启用)
relay_log_purge = 1            

# 背景介绍：
# MySQL 5.6版本通过将复制信息存放到表中来解决此问题.通过配置两个参数 relay_log_info_repository=TABLE
# master_info_repository=TABLE，relay log info会存放到 mysql.slave_relay_log_info表中，master info
# 会存放mysql.slave_master_info表中。就是把SQL线程执行事务和更新mysql.slave_replay_log_info的语句看
# 成一个事务处理,这样就会一直同步的

# 参数介绍：
# MySQL5.6后状态信息可存储在表中通过-master-info-repository和 --relay-log-info-repository来指定该行为
# 信息分别被存储在(mysql.slave_master_info)表和(mysql.slave_relay_log_info)表中
 
# 若master-info-repository为FILE，当设置为0，则每次sync-master-info事件都会刷新到磁盘，默认为1W次刷新到磁盘
# 若master-info-repository为TABLE，当设置为0，则表示不做任何更新，设置为1，则每次事件都会更新表 
master-info-repository=TABLE
sync-master-info= 1 

# 若relay-log-info-repository为FILE，当设置为0，交由OS刷新磁盘，默认为10000次刷新到磁盘
# 若relay-log-info-repository为TABLE，且为INNODB存储，且无论为任何值，则每次event都会更新表
relay-log-info-repository=TABLE
sync-relay-log-info = 1

# 通过MySQL 5.5版本开始提供的参数relay_log_recovery ，当slave发生crash后重启之后重连master时，slave不根据
# master-info.log的信息进行重连，而是根据relay-info中执行到master的位置信息重新开始拉master上的日志数据。
relay-log-recovery = 1




#MySQL 5.6.10版本提供了更方便的基于GTID的复制功能，MySQL可以通过GTID自动识别上次同步的点，极大地方便了运维人员，减少出错的几率
# gitd-mode,log-slave-updates,enforce-gtid-consistency,report-port,report-host 
# 以上参数用于启动GTID及满足附属其他需求
log-slave-updates=true
gtid-mode=on
enforce-gtid-consistency=true

# 从属服务器的端口
# report-port=port
# 从属服务器的主机名
# report-host=host

# read-only是用来限制普通用户对从数据库的更新操作，以确保从数据库的安全性，不过如果是超级用户依然可以对从数据库进行更新操作
# 值1则开启read-only，0为关闭
read-only = 1

# 设定从服务器的SQL线程数；0表示关闭多线程复制功能
slave-parallel-workers=2


# 设置MySQL主从同步中忽略不需要同步的数据库
# replicate-ignore-db = mysql
# replicate-ignore-db = information_schema
# replicate-ignore-db = performance_schema
# replicate-ignore-db = test
# replicate-ignore-db = zabbix
# replicate-ignore-db = sysbench
# slave-skip-errors=0							#主从忽略错误数

##注释掉,使用默认设置
#skip-external-locking
##innodb_force_recovery = 1
key_buffer_size = 256M
max_allowed_packet = 100M
#table_open_cache = 1024
#sort_buffer_size = 128M
#net_buffer_length = 8K
#read_buffer_size = 128M
#read_rnd_buffer_size = 256M
#myisam_sort_buffer_size = 32M

# skip-name-resolve 选项可以禁用dns解析，但是，这样不能在mysql的授权表中使用主机名了，只能使用IP
skip-name-resolve
# 服务器允许的并发连接数
max_connections = 1000

# -------------------------------------- 慢查询设置 ----------------------------------------------------
# | 开启慢查询												|
# | slow-query-log											|
# | 记录慢查询的时间											|
# | long_query_time = 1											|
# | 如果运行的SQL语句没有使用索引，则mysql数据库同样会将这条SQL语句记录到慢查询日志文件中		|
# | log-queries-not-using-indexes									|
# | ----------------------------------------------------------------------------------------------------

# ------------------------------------- InnoDB配置 ---------------------------------------------------------------------------------------
# 在一个专用的机器上，你可能会把 80% 的内存分配给 innodb_buffer_pool_size								  |
innodb_buffer_pool_size = 10G
## Set .._log_file_size to 25 % of buffer pool size											  |
innodb_log_file_size = 48M
# 这个参数用来设置 InnoDB 存储的数据目录信息和其它内部数据结构的内存池大小。应用程序里的表越多，你需要在这里分配越多的内存                |
innodb_additional_mem_pool_size=8M

# 该部分主要存放redo log的信息。InnoDB会首先将redo log写在这里，然后按照一定频率将其刷新回重做日志文件中。该空间不需要太大，因为一般情况  |
# 下该部分缓存会以较快频率刷新至redo log(Master Thread会每秒刷新、事务提交时会刷新、其空间少于1/2同样会刷新)                              |
innodb_log_buffer_size = 8M

# 当这个值设置为0，日志缓冲每秒一次地被写到日志文件，并且对日志文件做到磁盘操作的刷新，但是在一个事务提交不做任何操作			  |
# 当这个值为1（默认值）之时，在每个事务提交时，日志缓冲被写到日志文件，对日志文件做到磁盘操作的刷新					  |
# 当设置为2之时，在每个提交，日志缓冲被写到文件，但不对日志文件做到磁盘操作的刷新。尽管如此，在对日志文件的刷新在值为2的情况也每秒发生一次|
innodb_flush_log_at_trx_commit = 1

# 指示 MySQL在允许其他事务修改那些最终受事务回滚的数据之前要等待多长时间(秒数) 								  |
innodb_lock_wait_timeout = 50
# MySQL的InnoDB中innodb_file_per_table可以控制表空间管理方式，可以分别共享表和独占表，将值设为1表示独占表。每个表都有自己独立的空间。     |
innodb_file_per_table=1
# 此参数确定日志文件组中的文件的位置，日志组中文件的个数由innodb_log_files_in_group确定，此位置设置默认为MySQL的datadir 	          |
# innodb_log_group_home_dir = /usr/local/mysql/data
# ----------------------------------------------------------------------------------------------------------------------------------------


[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash
# Remove the next comment character if you are not familiar with SQL
#safe-updates

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout

[mysqldump]
quick
max_allowed_packet = 16M
